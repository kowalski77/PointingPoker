@using PointingPoker.Razor.Services
@using PointingPoker.Razor.ViewModels
@implements IDisposable

@inject ScoreService scoreService

@foreach (var player in playerVoteViewModels.Where(x => !x.IsObserver))
{
    <p>Player: @player.Name - Points: @player.Points</p>
}

@code {

    private List<PlayerViewModel> playerVoteViewModels { get; set; } = new();

    protected override void OnInitialized()
    {
        scoreService.PlayerChanged += OnPlayerChanged;
        scoreService.PlayerVoteChanged += OnPlayerVoteChanged;
    }

    private void OnPlayerChanged(object? sender, PlayerViewModel e)
    {
        this.playerVoteViewModels.Add(e);

        this.StateHasChanged();
    }

    private void OnPlayerVoteChanged(object? sender, PlayerVoteViewModel e)
    {
        var player = this.playerVoteViewModels.FirstOrDefault(x => x.Id == e.PlayerId);
        if (player is null)
        {
            return;
        }

        var newPlayer = player with { Points = e.Points };
        this.playerVoteViewModels.Remove(player);
        this.playerVoteViewModels.Add(newPlayer);

        this.StateHasChanged();
    }

    public void Dispose()
    {
        scoreService.PlayerChanged -= OnPlayerChanged;
        scoreService.PlayerVoteChanged -= OnPlayerVoteChanged;
    }
}